source("~/Downloads/Neurips_Supplement/Functions.R", echo=TRUE)
source("~/Downloads/Neurips_Supplement/Body.R", echo=TRUE)
source("~/Downloads/Neurips_Supplement/Body.R", echo=TRUE)
outputMatrix
source("~/Downloads/Neurips_Supplement/Body.R", echo=TRUE)
source("~/Downloads/Neurips_Supplement/Body.R", echo=TRUE)
source("~/Downloads/Neurips_Supplement/Body.R", echo=TRUE)
source("~/Downloads/Neurips_Supplement/Body.R", echo=TRUE)
outputMatrix
source("~/Downloads/Neurips_Supplement/Body.R", echo=TRUE)
log((2*5), base = 2)
source("~/.active-rstudio-document", echo=TRUE)
library(tidyverse)
library(cowplot)
set.seed(132)
sample_size <- 100
error_variance <- 1
betas_true <- 0:2
x_cov_mtx <- matrix(c(1.25, 0.75, 0.75, 1.25), 2, 2, TRUE)
# simulate x_1, x_2 from a bivariate normal and prepend intercept
x <- cbind(1, MASS::mvrnorm(sample_size, c(0,0), x_cov_mtx))
expectation_of_y <- as.numeric(x %*% betas_true)  # keeping x as a matrix for this step
x <- tibble(intercept=x[,1], x1=x[,2], x2=x[,3])
num_simulations <- 250
betas_simulated <- replicate(num_simulations, {
y <- rnorm(n, expectation_of_y, sqrt(error_variance))
coef(lm(y~.-1, data=x))
}) %>%
t() %>%
as_tibble() %>%
rename(beta_hat_0="intercept", beta_hat_1="x1", beta_hat_2="x2")
num_simulations <- 250
betas_simulated <- replicate(num_simulations, {
y <- rnorm(n, expectation_of_y, sqrt(error_variance))
coef(lm(y~.-1, data=x))
})
n
?replicate
library(tidyverse)
library(cowplot)
set.seed(132)
sample_size <- 100
error_variance <- 1
betas_true <- 0:2
x_cov_mtx <- matrix(c(1.25, 0.75, 0.75, 1.25), 2, 2, TRUE)
# simulate x_1, x_2 from a bivariate normal and prepend intercept
x <- cbind(1, MASS::mvrnorm(sample_size, c(0,0), x_cov_mtx))
expectation_of_y <- as.numeric(x %*% betas_true)  # keeping x as a matrix for this step
x <- tibble(intercept=x[,1], x1=x[,2], x2=x[,3])
num_simulations <- 250
betas_simulated <- replicate(num_simulations, {
y <- rnorm(1, expectation_of_y, sqrt(error_variance))
coef(lm(y~.-1, data=x))
}) %>%
t() %>%
as_tibble() %>%
rename(beta_hat_0="intercept", beta_hat_1="x1", beta_hat_2="x2")
library(tidyverse)
library(cowplot)
set.seed(132)
sample_size <- 100
error_variance <- 1
betas_true <- 0:2
x_cov_mtx <- matrix(c(1.25, 0.75, 0.75, 1.25), 2, 2, TRUE)
# simulate x_1, x_2 from a bivariate normal and prepend intercept
x <- cbind(1, MASS::mvrnorm(sample_size, c(0,0), x_cov_mtx))
expectation_of_y <- as.numeric(x %*% betas_true)  # keeping x as a matrix for this step
x <- tibble(intercept=x[,1], x1=x[,2], x2=x[,3])
num_simulations <- 250
betas_simulated <- replicate(num_simulations, function(n){
y <- rnorm(n, expectation_of_y, sqrt(error_variance))
coef(lm(y~.-1, data=x))
}) %>%
t() %>%
as_tibble() %>%
rename(beta_hat_0="intercept", beta_hat_1="x1", beta_hat_2="x2")
library(tidyverse)
library(cowplot)
set.seed(132)
sample_size <- 100
error_variance <- 1
betas_true <- 0:2
x_cov_mtx <- matrix(c(1.25, 0.75, 0.75, 1.25), 2, 2, TRUE)
# simulate x_1, x_2 from a bivariate normal and prepend intercept
x <- cbind(1, MASS::mvrnorm(sample_size, c(0,0), x_cov_mtx))
expectation_of_y <- as.numeric(x %*% betas_true)  # keeping x as a matrix for this step
x <- tibble(intercept=x[,1], x1=x[,2], x2=x[,3])
num_simulations <- 250
betas_simulated <- replicate(num_simulations, function(n){
y <- rnorm(n, expectation_of_y, sqrt(error_variance))
coef(lm(y~.-1, data=x))
})
betas_simulated
library(tidyverse)
library(cowplot)
set.seed(132)
sample_size <- 100
error_variance <- 1
betas_true <- 0:2
x_cov_mtx <- matrix(c(1.25, 0.75, 0.75, 1.25), 2, 2, TRUE)
# simulate x_1, x_2 from a bivariate normal and prepend intercept
x <- cbind(1, MASS::mvrnorm(sample_size, c(0,0), x_cov_mtx))
expectation_of_y <- as.numeric(x %*% betas_true)  # keeping x as a matrix for this step
x <- tibble(intercept=x[,1], x1=x[,2], x2=x[,3])
num_simulations <- 250
betas_simulated <- replicate(num_simulations, {
y <- rnorm(n, expectation_of_y, sqrt(error_variance))
coef(lm(y~.-1, data=x))
})
library(tidyverse)
library(cowplot)
set.seed(132)
sample_size <- 100
error_variance <- 1
betas_true <- 0:2
x_cov_mtx <- matrix(c(1.25, 0.75, 0.75, 1.25), 2, 2, TRUE)
# simulate x_1, x_2 from a bivariate normal and prepend intercept
x <- cbind(1, MASS::mvrnorm(sample_size, c(0,0), x_cov_mtx))
expectation_of_y <- as.numeric(x %*% betas_true)  # keeping x as a matrix for this step
x <- tibble(intercept=x[,1], x1=x[,2], x2=x[,3])
num_simulations <- 250
betas_simulated <- replicate(num_simulations, {
y <- rnorm(1, expectation_of_y, sqrt(error_variance))
coef(lm(y~.-1, data=x))
})
library(tidyverse)
library(cowplot)
set.seed(132)
sample_size <- 100
error_variance <- 1
betas_true <- 0:2
x_cov_mtx <- matrix(c(1.25, 0.75, 0.75, 1.25), 2, 2, TRUE)
# simulate x_1, x_2 from a bivariate normal and prepend intercept
x <- cbind(1, MASS::mvrnorm(sample_size, c(0,0), x_cov_mtx))
expectation_of_y <- as.numeric(x %*% betas_true)  # keeping x as a matrix for this step
x <- tibble(intercept=x[,1], x1=x[,2], x2=x[,3])
num_simulations <- 250
betas_simulated <- replicate(num_simulations, {
y <- rnorm(sample_size, expectation_of_y, sqrt(error_variance))
coef(lm(y~.-1, data=x))
}) %>%
t() %>%
as_tibble() %>%
rename(beta_hat_0="intercept", beta_hat_1="x1", beta_hat_2="x2")
library(tidyverse)
library(cowplot)
set.seed(132)
sample_size <- 100
error_variance <- 1
betas_true <- 0:2
x_cov_mtx <- matrix(c(1.25, 0.75, 0.75, 1.25), 2, 2, TRUE)
# simulate x_1, x_2 from a bivariate normal and prepend intercept
x <- cbind(1, MASS::mvrnorm(sample_size, c(0,0), x_cov_mtx))
expectation_of_y <- as.numeric(x %*% betas_true)  # keeping x as a matrix for this step
x <- tibble(intercept=x[,1], x1=x[,2], x2=x[,3])
num_simulations <- 250
betas_simulated <- replicate(num_simulations, {
y <- rnorm(sample_size, expectation_of_y, sqrt(error_variance))
coef(lm(y~.-1, data=x))
}) %>%
t() %>%
as_tibble() %>%
rename(beta_hat_0="intercept", beta_hat_1="x1", beta_hat_2="x2")
x_scatter_plot <- ggplot(x, aes(x=x1, y=x2)) +
geom_point() +
xlab(bquote(x[1])) +
ylab(bquote(x[2])) +
ggtitle(bquote(x[1] ~ "and" ~ x[2] ~ "with corr." %~~% .(round(cor(x$x1, x$x2), 3)) )) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
beta_hats_cor <- cor(betas_simulated$beta_hat_1, betas_simulated$beta_hat_2)
betas_scatter_plot <- ggplot(betas_simulated, aes(x=beta_hat_1, y=beta_hat_2)) +
geom_point() +
theme_bw() +
xlab(bquote(hat(beta)[1])) +
ylab(bquote(hat(beta)[2])) +
ggtitle(bquote(hat(beta)[1] ~ "and" ~ hat(beta)[2] ~ "with corr."  %~~% .(round(beta_hats_cor, 3)))) +
geom_point(data=data.frame(beta1 = betas_true[2], beta2=betas_true[3]), mapping=aes(x=beta1, y=beta2), col="red") +
theme(plot.title = element_text(hjust = 0.5))
betas_scatter_plot
library(tidyverse)
library(cowplot)
set.seed(961)
sample_size <- 100
error_variance <- 1
betas_true <- 0:2
x_cov_mtx <- matrix(c(1.25, 0.75, 0.75, 1.25), 2, 2, TRUE)
# simulate x_1, x_2 from a bivariate normal and prepend intercept
x <- cbind(1, MASS::mvrnorm(sample_size, c(0,0), x_cov_mtx))
expectation_of_y <- as.numeric(x %*% betas_true)  # keeping x as a matrix for this step
x <- tibble(intercept=x[,1], x1=x[,2], x2=x[,3])
num_simulations <- 250
betas_simulated <- replicate(num_simulations, {
y <- rnorm(sample_size, expectation_of_y, sqrt(error_variance))
coef(lm(y~.-1, data=x))
}) %>%
t() %>%
as_tibble() %>%
rename(beta_hat_0="intercept", beta_hat_1="x1", beta_hat_2="x2")
x_scatter_plot <- ggplot(x, aes(x=x1, y=x2)) +
geom_point() +
xlab(bquote(x[1])) +
ylab(bquote(x[2])) +
ggtitle(bquote(x[1] ~ "and" ~ x[2] ~ "with corr." %~~% .(round(cor(x$x1, x$x2), 3)) )) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
beta_hats_cor <- cor(betas_simulated$beta_hat_1, betas_simulated$beta_hat_2)
betas_scatter_plot <- ggplot(betas_simulated, aes(x=beta_hat_1, y=beta_hat_2)) +
geom_point() +
theme_bw() +
xlab(bquote(hat(beta)[1])) +
ylab(bquote(hat(beta)[2])) +
ggtitle(bquote(hat(beta)[1] ~ "and" ~ hat(beta)[2] ~ "with corr."  %~~% .(round(beta_hats_cor, 3)))) +
geom_point(data=data.frame(beta1 = betas_true[2], beta2=betas_true[3]), mapping=aes(x=beta1, y=beta2), col="red") +
theme(plot.title = element_text(hjust = 0.5))
betas_scatter_plot
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
setwd("~/Dropbox (Penn)/Kernel-Two-Sample/Simulations/Perturbed Uniform - MMDAgg/MMDAgg-Paper")
knitr::opts_chunk$set(echo = TRUE)
reticulate::source_python("~/Dropbox (Penn)/Kernel-Two-Sample/Simulations/Perturbed Uniform - MMDAgg/MMDAgg-Paper/weights.py")
reticulate::source_python("~/Dropbox (Penn)/Kernel-Two-Sample/Simulations/Perturbed Uniform - MMDAgg/MMDAgg-Paper/tests.py")
reticulate::source_python("~/Dropbox (Penn)/Kernel-Two-Sample/Simulations/Perturbed Uniform - MMDAgg/MMDAgg-Paper/weights.py")
reticulate::source_python("~/Dropbox (Penn)/Kernel-Two-Sample/Simulations/Perturbed Uniform - MMDAgg/MMDAgg-Paper/median.py")
reticulate::source_python("~/Dropbox (Penn)/Kernel-Two-Sample/Simulations/Perturbed Uniform - MMDAgg/MMDAgg-Paper/tests.py")
reticulate::source_python('~/Dropbox (Penn)/Kernel-Two-Sample/Simulations/Perturbed Uniform - MMDAgg/MMDAgg-Paper/tests.py')
reticulate::source_python('~/Dropbox (Penn)/Kernel-Two-Sample/Simulations/Perturbed Uniform - MMDAgg/MMDAgg-Paper/median.py')
reticulate::source_python("~/Dropbox (Penn)/Kernel-Two-Sample/Simulations/Perturbed Uniform - MMDAgg/MMDAgg-Paper/median.py")
reticulate::source_python("~/Dropbox (Penn)/Kernel-Two-Sample/Simulations/Perturbed Uniform - MMDAgg/MMDAgg-Paper/tests.py")
reticulate::source_python("~/Dropbox (Penn)/Kernel-Two-Sample/Simulations/Perturbed Uniform - MMDAgg/MMDAgg-Paper/seed.py")
reticulate::source_python("~/Dropbox (Penn)/Kernel-Two-Sample/Simulations/Perturbed Uniform - MMDAgg/MMDAgg-Paper/sampling.py")
reticulate::source_python("~/Dropbox (Penn)/Kernel-Two-Sample/Simulations/Perturbed Uniform - MMDAgg/MMDAgg-Paper/sample_test.py")
reticulate::source_python("~/Dropbox (Penn)/Kernel-Two-Sample/Simulations/Perturbed Uniform - MMDAgg/MMDAgg-Paper/kernel.py")
reticulate::source_python("~/Dropbox (Penn)/Kernel-Two-Sample/Simulations/Perturbed Uniform - MMDAgg/MMDAgg-Paper/sample_test.py")
reticulate::repl_python()
reticulate::source_python('~/Dropbox (Penn)/Kernel-Two-Sample/Simulations/Perturbed Uniform - MMDAgg/MMDAgg-Paper/tests.py')
reticulate::source_python('~/Dropbox (Penn)/Kernel-Two-Sample/Simulations/Perturbed Uniform - MMDAgg/MMDAgg-Paper/sample_test.py')
reticulate::repl_python()
reticulate::source_python('~/Dropbox (Penn)/Kernel-Two-Sample/Simulations/Perturbed Uniform - MMDAgg/MMDAgg-Paper/ost.py')
reticulate::source_python('~/Dropbox (Penn)/Kernel-Two-Sample/Simulations/Perturbed Uniform - MMDAgg/MMDAgg-Paper/sample_test.py')
reticulate::source_python('~/Dropbox (Penn)/Kernel-Two-Sample/Simulations/Perturbed Uniform - MMDAgg/MMDAgg-Paper/tests.py')
reticulate::source_python('~/Dropbox (Penn)/Kernel-Two-Sample/Simulations/Perturbed Uniform - MMDAgg/MMDAgg-Paper/sample_test.py')
reticulate::repl_python()
reticulate::source_python("~/Dropbox (Penn)/Kernel-Two-Sample/Simulations/Perturbed Uniform - MMDAgg/MMDAgg-Paper/seed.py")
reticulate::repl_python()
