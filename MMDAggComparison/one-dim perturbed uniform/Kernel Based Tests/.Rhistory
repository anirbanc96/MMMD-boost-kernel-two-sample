MMDAgg.gaussian.power <- read_csv("PowerGaussMixProb.csv")
library(tidyverse)
MMDAgg.gaussian.power <- read_csv("PowerGaussMixProb.csv")
MMDAgg.gaussian.power
source("~/Dropbox (Penn)/Kernel-Two-Sample/Simulations/Perturbed Uniform - MMDAgg/OverMean-DIM/Body.R", echo=TRUE)
power_out
MMDAgg.laplace.power <- read_csv("PowerLapsMixProb.csv")
MMDAgg.laplace.power
library(tidyverse)
MMDAgg.gaussian.power <- read_csv("PowerGaussMixProb.csv") %>%
as.matrix()
MMDAgg.laplace.power <- read_csv("PowerLapsMixProb.csv") %>%
as.matrix()
MMDAgg.gaussian.power
GEXP<-read.csv("MultiPower-GEXP.csv")
LAPMultiple<-read.csv("MultiPower-LAP.csv")
Mixed<-read.csv("MultiPower-MIXED.csv")
FR<-read.csv("Power-FR.csv")
d=GEXP[,2]
library(tidyverse)
MMDAgg.gaussian.power <- read_csv("PowerGaussMixProb.csv") %>%
as.matrix()
MMDAgg.laplace.power <- read_csv("PowerLapsMixProb.csv") %>%
as.matrix()
pdf(file="ScaleNormaltMixing30.pdf")
plot(d, rev(apply(GEXP[,-c(1,2)], 1, mean)), type='b', col=1, pch=1, lwd=1.5, ylim=c(0, 0.95), xlab="Mixing Probability",
ylab='Power', main="Gaussian and t-distribution Mixture in Dimension 30")
points(d, rev(apply(LAPMultiple[,-c(1,2)], 1, mean)), type='b', col=2, pch=2, lwd=1.5)
points(d, rev(apply(Mixed[,-c(1,2)], 1, mean)), type='b', col=3, pch=3, lwd=1.5)
points(d, rev(apply(FR[,-c(1,2)], 1, mean)), type='b', col=4, pch=4, lwd=1.5)
points(d, MMDAgg.gaussian.power[1,], type='b', col=5, pch=5, lwd=1.5)
pdf(file="ScaleNormaltMixing30.pdf")
plot(d, rev(apply(GEXP[,-c(1,2)], 1, mean)), type='b', col=1, pch=1, lwd=1.5, ylim=c(0, 0.95), xlab="Mixing Probability",
ylab='Power', main="Gaussian and t-distribution Mixture in Dimension 30")
points(d, rev(apply(LAPMultiple[,-c(1,2)], 1, mean)), type='b', col=2, pch=2, lwd=1.5)
points(d, rev(apply(Mixed[,-c(1,2)], 1, mean)), type='b', col=3, pch=3, lwd=1.5)
points(d, rev(apply(FR[,-c(1,2)], 1, mean)), type='b', col=4, pch=4, lwd=1.5)
points(d, MMDAgg.gaussian.power[1,], type='b', col=5, pch=5, lwd=1.5)
d
MMDAgg.gaussian.power[1,]
pdf(file="ScaleNormaltMixing30.pdf")
plot(d, rev(apply(GEXP[,-c(1,2)], 1, mean)), type='b', col=1, pch=1, lwd=1.5, ylim=c(0, 0.95), xlab="Mixing Probability",
ylab='Power', main="Gaussian and t-distribution Mixture in Dimension 30")
points(d, rev(apply(LAPMultiple[,-c(1,2)], 1, mean)), type='b', col=2, pch=2, lwd=1.5)
points(d, rev(apply(Mixed[,-c(1,2)], 1, mean)), type='b', col=3, pch=3, lwd=1.5)
points(d, rev(apply(FR[,-c(1,2)], 1, mean)), type='b', col=4, pch=4, lwd=1.5)
points(d, MMDAgg.gaussian.power[1,-1], type='b', col=5, pch=5, lwd=1.5)
points(d, MMDAgg.laplace.power[1,-1], type='b', col=6, pch=6, lwd=1.5)
legend("topleft", c("Gauss MMMD","LAP MMMD","Mixed MMMD","FR", "Gauss MMD","LAP MMD"),
bg='transparent', col=c(1,2,3,4,5,6), pch = c(1, 2, 3, 4, 5, 6))
dev.off()
MMDAgg.gaussian.power <- read_csv("PowerGaussMixProb.csv") %>%
dplyr::arrange(-dplyr::col_number())
MMDAgg.gaussian.power <- read_csv("PowerGaussMixProb.csv") %>%
map_df(rev)
MMDAgg.gaussian.power
MMDAgg.gaussian.power <- read_csv("PowerGaussMixProb.csv") %>%
rev(.)
MMDAgg.gaussian.power
pdf(file="ScaleNormaltMixing30.pdf")
plot(d, rev(apply(GEXP[,-c(1,2)], 1, mean)), type='b', col=1, pch=1, lwd=1.5,
ylim=c(0, 0.95), xlab="Mixing Probability",
ylab='Power', main="Gaussian and t-distribution Mixture in Dimension 30")
points(d, rev(apply(LAPMultiple[,-c(1,2)], 1, mean)), type='b', col=2, pch=2, lwd=1.5)
points(d, rev(apply(Mixed[,-c(1,2)], 1, mean)), type='b', col=3, pch=3, lwd=1.5)
points(d, rev(apply(FR[,-c(1,2)], 1, mean)), type='b', col=4, pch=4, lwd=1.5)
points(d, MMDAgg.gaussian.power[1, 1:length(d)], type='b', col=5, pch=5, lwd=1.5)
points(d, MMDAgg.laplace.power[1, 1:length(d)], type='b', col=6, pch=6, lwd=1.5)
legend("topleft", c("Gauss MMMD","LAP MMMD","Mixed MMMD","FR", "Gauss MMD","LAP MMD"),
bg='transparent', col=c(1,2,3,4,5,6), pch = c(1, 2, 3, 4, 5, 6))
dev.off()
MMDAgg.gaussian.power[1, 1:length(d)]
MMDAgg.gaussian.power <- read_csv("PowerGaussMixProb.csv") %>%
rev(.) %>%
as.matrix()
MMDAgg.laplace.power <- read_csv("PowerLapsMixProb.csv") %>%
rev(.) %>%
as.matrix()
MMDAgg.gaussian.power[1, 1:length(d)]
pdf(file="ScaleNormaltMixing30.pdf")
plot(d, rev(apply(GEXP[,-c(1,2)], 1, mean)), type='b', col=1, pch=1, lwd=1.5,
ylim=c(0, 0.95), xlab="Mixing Probability",
ylab='Power', main="Gaussian and t-distribution Mixture in Dimension 30")
points(d, rev(apply(LAPMultiple[,-c(1,2)], 1, mean)), type='b', col=2, pch=2, lwd=1.5)
points(d, rev(apply(Mixed[,-c(1,2)], 1, mean)), type='b', col=3, pch=3, lwd=1.5)
points(d, rev(apply(FR[,-c(1,2)], 1, mean)), type='b', col=4, pch=4, lwd=1.5)
points(d, MMDAgg.gaussian.power[1, 1:length(d)], type='b', col=5, pch=5, lwd=1.5)
points(d, MMDAgg.laplace.power[1, 1:length(d)], type='b', col=6, pch=6, lwd=1.5)
legend("topleft", c("Gauss MMMD","LAP MMMD","Mixed MMMD","FR", "Gauss MMD","LAP MMD"),
bg='transparent', col=c(1,2,3,4,5,6), pch = c(1, 2, 3, 4, 5, 6))
dev.off()
source("~/Dropbox (Penn)/Kernel-Two-Sample/Simulations/Perturbed Uniform - MMDAgg/MixProb/Figure.R", echo=TRUE)
setwd("~/Dropbox (Penn)/Kernel-Two-Sample/Simulations/Perturbed Uniform - MMDAgg/LocalPower")
setwd("~/Dropbox (Penn)/Kernel-Two-Sample/Simulations/Perturbed Uniform - MMDAgg/LocalPower")
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
GEXP
MMDAgg.gaussian.power
source("~/.active-rstudio-document", echo=TRUE)
MMDAgg.gaussian.power
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
setwd("~/Dropbox (Penn)/Kernel-Two-Sample/Simulations/MMDAgg Comparisons/DIM 1/Kernel Based Tests")
source("Functions.R")
#------------------------------------------------------------------------------#
#------------------------------------------------------------------------------#
start <- Sys.time()
# Number of repetitions
n.rep <- 1
# Number of data points
n <- 500
# Dimension vector of data
d <- 1
# number of perturbations
p.seq <- c(1,2,3,4,5,6)
theta_seed <- 1
sob_smooth <- 1
c_d <- 2.7
#------------------------------------------------------------------------------#
#------------------------------------------------------------------------------#
# Choice of kernel for single and multiple kernel tests
# poissble choices:
# single - "GAUSS" or "LAP" for gaussian or laplacian
# multiple - "MINMAX", "GEXP" or "MIXED" for gaussian kernel with min-max,
# exponential bandwidth choice, or mixture of gaussian and laplace kernel.
# 1st coordinate for single, 2nd for multiple
kernel.choice <- c("LAP","GAUSS", "LAP","GEXP", "MIXED")
#------------------------------------------------------------------------------#
#------------------------------------------------------------------------------#
#--------------------------------------------------------------------------#
reticulate::source_python("Agg.py")
# storing power values for each dimensions
# Libraries for parallelising
library(foreach)
library(doParallel)
#library(snow)
#cores <- strtoi(Sys.getenv("NSLOTS"))-1
#cl <- makeCluster(cores, methods = FALSE, type = "MPI")
#registerDoParallel(cl)
cores <- detectCores()
cl <- makeCluster(cores[1]-1) #not to overload your computer
registerDoParallel(cl)
out.d <- c()
for (iter in 1:n.rep){
# storing power values for particular iteration
out.d.iter <- power.d(n = n, d = d, p.seq = p.seq, sob_smooth = sob_smooth,
c_d = c_d, kernel.choice = kernel.choice,
theta_Seed = theta_seed,  n.iter = 500)
out.d <- c(out.d, out.d.iter)
print (iter)
}
