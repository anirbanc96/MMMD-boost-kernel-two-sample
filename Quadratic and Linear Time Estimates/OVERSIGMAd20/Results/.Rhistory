kernel.choice <- c("LAP","GEXP", "MIXED")
#------------------------------------------------------------------------------#
#------------------------------------------------------------------------------#
# storing power values for each dimensions
# Libraries for parallelising
library(foreach)
library(doParallel)
#library(snow)
#cores <- strtoi(Sys.getenv("NSLOTS"))-1
#cl <- makeCluster(cores, methods = FALSE, type = "MPI")
#registerDoParallel(cl)
cores <- detectCores()
cl <- makeCluster(cores[1]-1) #not to overload your computer
registerDoParallel(cl)
out.d <- c()
for (iter in 1:n.rep){
# storing power values for particular iteration
out.d.iter <- power.d(n, sigma.param = sigma.param, sigma.mult = sigma.mult,
mu.param = mu.param, d = d, p = p,
kernel.choice = kernel.choice, n.iter = 10)
out.d <- c(out.d, out.d.iter)
print (iter)
}
# Making the output a matrix for ease of access
out.d <- as.matrix(as.data.frame(out.d))
end <- Sys.time()
end-start
stopCluster(cl)
out.d
start <- Sys.time()
# Number of repetitions
n.rep <- 1
# Number of data points
n <- 500
# Dimension vector of data
d <- c(5, 10, 25, 50, 75, 100, 150)
# probability of mixture
#------------------------------------------------------------------------------#
# Note: Change the following values according to the simulation
p <- 0
# parameter for sigma0 matrix generation
sigma.param <- 1
# parameter for sigma1 = c*sigma0 matrix generation
sigma.mult <- 1
# parameter for mean value for H1 distribution
mu.param <- 1.25
#------------------------------------------------------------------------------#
#------------------------------------------------------------------------------#
# Choice of kernel for single and multiple kernel tests
# poissble choices:
# single - "GAUSS" or "LAP" for gaussian or laplacian
# multiple - "MINMAX", "GEXP" or "MIXED" for gaussian kernel with min-max,
# exponential bandwidth choice, or mixture of gaussian and laplace kernel.
# 1st two coordinate for single, Last three for multiple
kernel.choice <- c("LAP","GEXP", "MIXED")
#------------------------------------------------------------------------------#
#------------------------------------------------------------------------------#
# storing power values for each dimensions
# Libraries for parallelising
library(foreach)
library(doParallel)
#library(snow)
#cores <- strtoi(Sys.getenv("NSLOTS"))-1
#cl <- makeCluster(cores, methods = FALSE, type = "MPI")
#registerDoParallel(cl)
cores <- detectCores()
cl <- makeCluster(cores[1]-1) #not to overload your computer
registerDoParallel(cl)
out.d <- c()
for (iter in 1:n.rep){
# storing power values for particular iteration
out.d.iter <- power.d(n, sigma.param = sigma.param, sigma.mult = sigma.mult,
mu.param = mu.param, d = d, p = p,
kernel.choice = kernel.choice, n.iter = 50)
out.d <- c(out.d, out.d.iter)
print (iter)
}
out.d.iter
source("C:/Users/anirbanc/Documents/Unititled3.R", echo=TRUE)
power.d(n, sigma.param = sigma.param, sigma.mult = sigma.mult,
mu.param = mu.param, d = d, p = p,
kernel.choice = kernel.choice, n.iter = 50)
source("C:/Users/anirbanc/Documents/Unititled3.R", echo=TRUE)
start <- Sys.time()
# Number of repetitions
n.rep <- 1
# Number of data points
n <- 500
# Dimension vector of data
d <- c(5, 10, 25, 50, 75, 100, 150)
# probability of mixture
#------------------------------------------------------------------------------#
# Note: Change the following values according to the simulation
p <- 0
# parameter for sigma0 matrix generation
sigma.param <- 1
# parameter for sigma1 = c*sigma0 matrix generation
sigma.mult <- 1
# parameter for mean value for H1 distribution
mu.param <- 1.25
#------------------------------------------------------------------------------#
#------------------------------------------------------------------------------#
# Choice of kernel for single and multiple kernel tests
# poissble choices:
# single - "GAUSS" or "LAP" for gaussian or laplacian
# multiple - "MINMAX", "GEXP" or "MIXED" for gaussian kernel with min-max,
# exponential bandwidth choice, or mixture of gaussian and laplace kernel.
# 1st two coordinate for single, Last three for multiple
kernel.choice <- c("LAP","GEXP", "MIXED")
#------------------------------------------------------------------------------#
#------------------------------------------------------------------------------#
# storing power values for each dimensions
# Libraries for parallelising
library(foreach)
library(doParallel)
#library(snow)
#cores <- strtoi(Sys.getenv("NSLOTS"))-1
#cl <- makeCluster(cores, methods = FALSE, type = "MPI")
#registerDoParallel(cl)
cores <- detectCores()
cl <- makeCluster(cores[1]-1) #not to overload your computer
registerDoParallel(cl)
out.d <- c()
for (iter in 1:n.rep){
# storing power values for particular iteration
out.d.iter <- power.d(n, sigma.param = sigma.param, sigma.mult = sigma.mult,
mu.param = mu.param, d.seq = d, p = p,
kernel.choice = kernel.choice, n.iter = 50)
out.d <- c(out.d, out.d.iter)
print (iter)
}
# Making the output a matrix for ease of access
out.d <- as.matrix(as.data.frame(out.d))
end <- Sys.time()
end-start
stopCluster(cl)
out.d
source("C:/Users/anirbanc/Documents/Unititled3.R", echo=TRUE)
start <- Sys.time()
# Number of repetitions
n.rep <- 1
# Number of data points
n <- 200
# Dimension vector of data
d <- 75
# probability of mixture
#------------------------------------------------------------------------------#
# Note: Change the following values according to the simulation
p <- 0
# parameter for sigma0 matrix generation
sigma.param <- 1
# parameter for sigma1 = c*sigma0 matrix generation
sigma.mult <- seq(1,1.5, length.out = 11)
# parameter for mean value for H1 distribution
mu.param <- 0
#------------------------------------------------------------------------------#
#------------------------------------------------------------------------------#
# Choice of kernel for single and multiple kernel tests
# poissble choices:
# single - "GAUSS" or "LAP" for gaussian or laplacian
# multiple - "MINMAX", "GEXP" or "MIXED" for gaussian kernel with min-max,
# exponential bandwidth choice, or mixture of gaussian and laplace kernel.
# 1st two coordinate for single, Last three for multiple
kernel.choice <- c("LAP","GEXP", "MIXED")
#------------------------------------------------------------------------------#
#------------------------------------------------------------------------------#
# storing power values for each dimensions
# Libraries for parallelising
library(foreach)
library(doParallel)
#library(snow)
#cores <- strtoi(Sys.getenv("NSLOTS"))-1
#cl <- makeCluster(cores, methods = FALSE, type = "MPI")
#registerDoParallel(cl)
cores <- detectCores()
cl <- makeCluster(cores[1]-1) #not to overload your computer
registerDoParallel(cl)
out.d <- c()
for (iter in 1:n.rep){
# storing power values for particular iteration
out.d.iter <- power.d(n, sigma.param = sigma.param, sigma.mult = sigma.mult,
mu.param = mu.param, d.seq = d, p = p,
kernel.choice = kernel.choice, n.iter = 50)
out.d <- c(out.d, out.d.iter)
print (iter)
}
start <- Sys.time()
# Number of repetitions
n.rep <- 1
# Number of data points
n <- 200
# Dimension vector of data
d <- 75
# probability of mixture
#------------------------------------------------------------------------------#
# Note: Change the following values according to the simulation
p <- 0
# parameter for sigma0 matrix generation
sigma.param <- 1
# parameter for sigma1 = c*sigma0 matrix generation
sigma.mult <- seq(1,1.5, length.out = 11)
# parameter for mean value for H1 distribution
mu.param <- 0
#------------------------------------------------------------------------------#
#------------------------------------------------------------------------------#
# Choice of kernel for single and multiple kernel tests
# poissble choices:
# single - "GAUSS" or "LAP" for gaussian or laplacian
# multiple - "MINMAX", "GEXP" or "MIXED" for gaussian kernel with min-max,
# exponential bandwidth choice, or mixture of gaussian and laplace kernel.
# 1st two coordinate for single, Last three for multiple
kernel.choice <- c("LAP","GEXP", "MIXED")
#------------------------------------------------------------------------------#
#------------------------------------------------------------------------------#
# storing power values for each dimensions
# Libraries for parallelising
library(foreach)
library(doParallel)
#library(snow)
#cores <- strtoi(Sys.getenv("NSLOTS"))-1
#cl <- makeCluster(cores, methods = FALSE, type = "MPI")
#registerDoParallel(cl)
cores <- detectCores()
cl <- makeCluster(cores[1]-1) #not to overload your computer
registerDoParallel(cl)
out.d <- c()
for (iter in 1:n.rep){
# storing power values for particular iteration
out.d.iter <- power.d(n, sigma.param = sigma.param, sigma.mult = sigma.mult,
mu.param = mu.param, d = d, p = p,
kernel.choice = kernel.choice, n.iter = 50)
out.d <- c(out.d, out.d.iter)
print (iter)
}
# Making the output a matrix for ease of access
out.d <- as.matrix(as.data.frame(out.d))
end <- Sys.time()
end-start
stopCluster(cl)
out.d
start <- Sys.time()
# Number of repetitions
n.rep <- 1
# Number of data points
n <- 200
# Dimension vector of data
d <- 75
# probability of mixture
#------------------------------------------------------------------------------#
# Note: Change the following values according to the simulation
p <- 0
# parameter for sigma0 matrix generation
sigma.param <- 1
# parameter for sigma1 = c*sigma0 matrix generation
sigma.mult <- seq(1,1.3, length.out = 11)
# parameter for mean value for H1 distribution
mu.param <- 0
#------------------------------------------------------------------------------#
#------------------------------------------------------------------------------#
# Choice of kernel for single and multiple kernel tests
# poissble choices:
# single - "GAUSS" or "LAP" for gaussian or laplacian
# multiple - "MINMAX", "GEXP" or "MIXED" for gaussian kernel with min-max,
# exponential bandwidth choice, or mixture of gaussian and laplace kernel.
# 1st two coordinate for single, Last three for multiple
kernel.choice <- c("LAP","GEXP", "MIXED")
#------------------------------------------------------------------------------#
#------------------------------------------------------------------------------#
# storing power values for each dimensions
# Libraries for parallelising
library(foreach)
library(doParallel)
#library(snow)
#cores <- strtoi(Sys.getenv("NSLOTS"))-1
#cl <- makeCluster(cores, methods = FALSE, type = "MPI")
#registerDoParallel(cl)
cores <- detectCores()
cl <- makeCluster(cores[1]-1) #not to overload your computer
registerDoParallel(cl)
out.d <- c()
for (iter in 1:n.rep){
# storing power values for particular iteration
out.d.iter <- power.d(n, sigma.param = sigma.param, sigma.mult = sigma.mult,
mu.param = mu.param, d = d, p = p,
kernel.choice = kernel.choice, n.iter = 50)
out.d <- c(out.d, out.d.iter)
print (iter)
}
# Making the output a matrix for ease of access
out.d <- as.matrix(as.data.frame(out.d))
end <- Sys.time()
end-start
stopCluster(cl)
out.d
start <- Sys.time()
# Number of repetitions
n.rep <- 1
# Number of data points
n <- 200
# Dimension vector of data
d <- 75
# probability of mixture
#------------------------------------------------------------------------------#
# Note: Change the following values according to the simulation
p <- 0
# parameter for sigma0 matrix generation
sigma.param <- 1
# parameter for sigma1 = c*sigma0 matrix generation
sigma.mult <- seq(1,1.4, length.out = 11)
# parameter for mean value for H1 distribution
mu.param <- 0
#------------------------------------------------------------------------------#
#------------------------------------------------------------------------------#
# Choice of kernel for single and multiple kernel tests
# poissble choices:
# single - "GAUSS" or "LAP" for gaussian or laplacian
# multiple - "MINMAX", "GEXP" or "MIXED" for gaussian kernel with min-max,
# exponential bandwidth choice, or mixture of gaussian and laplace kernel.
# 1st two coordinate for single, Last three for multiple
kernel.choice <- c("LAP","GEXP", "MIXED")
#------------------------------------------------------------------------------#
#------------------------------------------------------------------------------#
# storing power values for each dimensions
# Libraries for parallelising
library(foreach)
library(doParallel)
#library(snow)
#cores <- strtoi(Sys.getenv("NSLOTS"))-1
#cl <- makeCluster(cores, methods = FALSE, type = "MPI")
#registerDoParallel(cl)
cores <- detectCores()
cl <- makeCluster(cores[1]-1) #not to overload your computer
registerDoParallel(cl)
out.d <- c()
for (iter in 1:n.rep){
# storing power values for particular iteration
out.d.iter <- power.d(n, sigma.param = sigma.param, sigma.mult = sigma.mult,
mu.param = mu.param, d = d, p = p,
kernel.choice = kernel.choice, n.iter = 50)
out.d <- c(out.d, out.d.iter)
print (iter)
}
# Making the output a matrix for ease of access
out.d <- as.matrix(as.data.frame(out.d))
end <- Sys.time()
end-start
stopCluster(cl)
out.d
start <- Sys.time()
# Number of repetitions
n.rep <- 1
# Number of data points
n <- 200
# Dimension vector of data
d <- 300
# probability of mixture
#------------------------------------------------------------------------------#
# Note: Change the following values according to the simulation
p <- 0
# parameter for sigma0 matrix generation
sigma.param <- 1
# parameter for sigma1 = c*sigma0 matrix generation
sigma.mult <- seq(1,1.1, length.out = 11)
# parameter for mean value for H1 distribution
mu.param <- 0
#------------------------------------------------------------------------------#
#------------------------------------------------------------------------------#
# Choice of kernel for single and multiple kernel tests
# poissble choices:
# single - "GAUSS" or "LAP" for gaussian or laplacian
# multiple - "MINMAX", "GEXP" or "MIXED" for gaussian kernel with min-max,
# exponential bandwidth choice, or mixture of gaussian and laplace kernel.
# 1st two coordinate for single, Last three for multiple
kernel.choice <- c("LAP","GEXP", "MIXED")
#------------------------------------------------------------------------------#
#------------------------------------------------------------------------------#
# storing power values for each dimensions
# Libraries for parallelising
library(foreach)
library(doParallel)
#library(snow)
#cores <- strtoi(Sys.getenv("NSLOTS"))-1
#cl <- makeCluster(cores, methods = FALSE, type = "MPI")
#registerDoParallel(cl)
cores <- detectCores()
cl <- makeCluster(cores[1]-1) #not to overload your computer
registerDoParallel(cl)
out.d <- c()
for (iter in 1:n.rep){
# storing power values for particular iteration
out.d.iter <- power.d(n, sigma.param = sigma.param, sigma.mult = sigma.mult,
mu.param = mu.param, d = d, p = p,
kernel.choice = kernel.choice, n.iter = 10)
out.d <- c(out.d, out.d.iter)
print (iter)
}
source("C:/Users/anirbanc/Documents/Unititled3.R", echo=TRUE)
start <- Sys.time()
# Number of repetitions
n.rep <- 1
# Number of data points
n <- 200
# Dimension vector of data
d <- 300
# probability of mixture
#------------------------------------------------------------------------------#
# Note: Change the following values according to the simulation
p <- 0
# parameter for sigma0 matrix generation
sigma.param <- 1
# parameter for sigma1 = c*sigma0 matrix generation
sigma.mult <- seq(1,1.1, length.out = 11)
# parameter for mean value for H1 distribution
mu.param <- 0
#------------------------------------------------------------------------------#
#------------------------------------------------------------------------------#
# Choice of kernel for single and multiple kernel tests
# poissble choices:
# single - "GAUSS" or "LAP" for gaussian or laplacian
# multiple - "MINMAX", "GEXP" or "MIXED" for gaussian kernel with min-max,
# exponential bandwidth choice, or mixture of gaussian and laplace kernel.
# 1st two coordinate for single, Last three for multiple
kernel.choice <- c("LAP","GEXP", "MIXED")
#------------------------------------------------------------------------------#
#------------------------------------------------------------------------------#
# storing power values for each dimensions
# Libraries for parallelising
library(foreach)
library(doParallel)
#library(snow)
#cores <- strtoi(Sys.getenv("NSLOTS"))-1
#cl <- makeCluster(cores, methods = FALSE, type = "MPI")
#registerDoParallel(cl)
cores <- detectCores()
cl <- makeCluster(cores[1]-1) #not to overload your computer
registerDoParallel(cl)
out.d <- c()
for (iter in 1:n.rep){
# storing power values for particular iteration
out.d.iter <- power.d(n, sigma.param = sigma.param, sigma.mult = sigma.mult,
mu.param = mu.param, d = d, p = p,
kernel.choice = kernel.choice, n.iter = 10)
out.d <- c(out.d, out.d.iter)
print (iter)
}
# Making the output a matrix for ease of access
out.d <- as.matrix(as.data.frame(out.d))
end <- Sys.time()
end-start
stopCluster(cl)
out.d
start <- Sys.time()
# Number of repetitions
n.rep <- 1
# Number of data points
n <- 200
# Dimension vector of data
d <- 300
# probability of mixture
#------------------------------------------------------------------------------#
# Note: Change the following values according to the simulation
p <- 0
# parameter for sigma0 matrix generation
sigma.param <- 1
# parameter for sigma1 = c*sigma0 matrix generation
sigma.mult <- seq(1,1.2, length.out = 11)
# parameter for mean value for H1 distribution
mu.param <- 0
#------------------------------------------------------------------------------#
#------------------------------------------------------------------------------#
# Choice of kernel for single and multiple kernel tests
# poissble choices:
# single - "GAUSS" or "LAP" for gaussian or laplacian
# multiple - "MINMAX", "GEXP" or "MIXED" for gaussian kernel with min-max,
# exponential bandwidth choice, or mixture of gaussian and laplace kernel.
# 1st two coordinate for single, Last three for multiple
kernel.choice <- c("LAP","GEXP", "MIXED")
#------------------------------------------------------------------------------#
#------------------------------------------------------------------------------#
# storing power values for each dimensions
# Libraries for parallelising
library(foreach)
library(doParallel)
#library(snow)
#cores <- strtoi(Sys.getenv("NSLOTS"))-1
#cl <- makeCluster(cores, methods = FALSE, type = "MPI")
#registerDoParallel(cl)
cores <- detectCores()
cl <- makeCluster(cores[1]-1) #not to overload your computer
registerDoParallel(cl)
out.d <- c()
for (iter in 1:n.rep){
# storing power values for particular iteration
out.d.iter <- power.d(n, sigma.param = sigma.param, sigma.mult = sigma.mult,
mu.param = mu.param, d = d, p = p,
kernel.choice = kernel.choice, n.iter = 50)
out.d <- c(out.d, out.d.iter)
print (iter)
}
# Making the output a matrix for ease of access
out.d <- as.matrix(as.data.frame(out.d))
end <- Sys.time()
end-start
stopCluster(cl)
out.d
setwd("C:/Users/anirbanc/Dropbox (Penn)/Kernel-Two-Sample/Revisions/Code/OVERSIGMAd20/Results")
source("C:/Users/anirbanc/Dropbox (Penn)/Kernel-Two-Sample/Revisions/Code/OVERSIGMAd20/Results/Plot.R", echo=TRUE)
pdf(file=paste(c("LinQuadGScale",d,".pdf")))
pdf(file=paste0("LinQuadGaussianScale", d,".pdf"))
d
pdf(file="LinQuadGaussianScaled20.pdf")
source("C:/Users/anirbanc/Dropbox (Penn)/Kernel-Two-Sample/Revisions/Code/OVERSIGMAd20/Results/Plot.R", echo=TRUE)
