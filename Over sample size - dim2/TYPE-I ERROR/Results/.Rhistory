# storing power values for particular iteration
out.d.iter <- power.d(n.seq, sigma.param = sigma.param, sigma.mult = sigma.mult,
mu.param = mu.param, d, p = p,
kernel.choice = kernel.choice, n.iter = 500)
out.d <- c(out.d, out.d.iter)
print (iter)
}
out.d <- as.matrix(as.data.frame(out.d))
end <- Sys.time()
end-start
source("~/.active-rstudio-document", echo=TRUE)
start <- Sys.time()
# Number of repetitions
n.rep <- 1
# Number of data points
n.seq <- c(100, 200)
# Dimension vector of data
d <- 5
# probability of mixture
p <- 0
# parameter for sigma0 matrix generation
sigma.param <- 1
# parameter for sigma1 = c*sigma0 matrix generation
sigma.mult <- 1.15
# parameter for mean value for H1 distribution
mu.param <- 0
#------------------------------------------------------------------------------#
#------------------------------------------------------------------------------#
# Choice of kernel for single and multiple kernel tests
# poissble choices:
# single - "GAUSS" or "LAP" for gaussian or laplacian
# multiple - "MINMAX", "GEXP" or "MIXED" for gaussian kernel with min-max,
# exponential bandwidth choice, or mixture of gaussian and laplace kernel.
# 1st coordinate for single, 2nd for multiple
kernel.choice <- c("LAP","GAUSS", "LAP","GEXP", "MIXED")
#------------------------------------------------------------------------------#
#------------------------------------------------------------------------------#
# storing power values for each dimensions
# Libraries for parallelising
library(foreach)
library(doParallel)
#library(snow)
#cores <- strtoi(Sys.getenv("NSLOTS"))-1
#cl <- makeCluster(cores, methods = FALSE, type = "MPI")
#registerDoParallel(cl)
cores <- detectCores()
cl <- makeCluster(cores[1]-1) #not to overload your computer
registerDoParallel(cl)
out.d <- c()
for (iter in 1:n.rep){
# storing power values for particular iteration
out.d.iter <- power.d(n.seq, sigma.param = sigma.param, sigma.mult = sigma.mult,
mu.param = mu.param, d, p = p,
kernel.choice = kernel.choice, n.iter = 500)
out.d <- c(out.d, out.d.iter)
print (iter)
}
out.d <- as.matrix(as.data.frame(out.d))
end <- Sys.time()
end-start
start <- Sys.time()
# Number of repetitions
n.rep <- 1
# Number of data points
n.seq <- c(100, 200)
# Dimension vector of data
d <- 5
# probability of mixture
p <- 0
# parameter for sigma0 matrix generation
sigma.param <- 1
# parameter for sigma1 = c*sigma0 matrix generation
sigma.mult <- 1.15
# parameter for mean value for H1 distribution
mu.param <- 0
#------------------------------------------------------------------------------#
#------------------------------------------------------------------------------#
# Choice of kernel for single and multiple kernel tests
# poissble choices:
# single - "GAUSS" or "LAP" for gaussian or laplacian
# multiple - "MINMAX", "GEXP" or "MIXED" for gaussian kernel with min-max,
# exponential bandwidth choice, or mixture of gaussian and laplace kernel.
# 1st coordinate for single, 2nd for multiple
kernel.choice <- c("LAP","GAUSS", "LAP","GEXP", "MIXED")
#------------------------------------------------------------------------------#
#------------------------------------------------------------------------------#
# storing power values for each dimensions
# Libraries for parallelising
library(foreach)
library(doParallel)
#library(snow)
#cores <- strtoi(Sys.getenv("NSLOTS"))-1
#cl <- makeCluster(cores, methods = FALSE, type = "MPI")
#registerDoParallel(cl)
cores <- detectCores()
cl <- makeCluster(cores[1]-1) #not to overload your computer
registerDoParallel(cl)
out.d <- c()
for (iter in 1:n.rep){
# storing power values for particular iteration
out.d.iter <- power.d(n.seq, sigma.param = sigma.param, sigma.mult = sigma.mult,
mu.param = mu.param, d, p = p,
kernel.choice = kernel.choice, n.iter = 500)
out.d <- c(out.d, out.d.iter)
print (iter)
}
out.d <- as.matrix(as.data.frame(out.d))
end <- Sys.time()
end-start
mu0
k <- 1
# redefining dimension vector for ease
n <- n.seq
out.compare <- c()
for (k in 1:length(n)){
#--------------------------------------------------------------------------#
library(LaplacesDemon)
library(Rfast)
#--------------------------------------------------------------------------#
# Creating a log file to keep track of progress
#cat(paste("\n","Starting iteration",k,"\n"),
#    file="log.txt", append=TRUE)
#--------------------------------------------------------------------------#
# Sigma0 matrix <- cov matrix under H0
#Sigma0 <- matrix(0, nrow = d, ncol = d)
#for(i in 1:d){
#  for(j in 1:d){
#    Sigma0[i,j] = sigma.param^(abs(i-j))
#  }
#}
Sigma0 <- diag(sigma.param, d, d)
# cov matrix under H0
Sigma1 <- sigma.mult*Sigma0
#--------------------------------------------------------------------------#
#--------------------------------------------------------------------------#
# mean vector under H0
mu0 <- rep(0, d)
# mean vector under H1
mu1 <- rep(mu.param, d)
#----------------------------------------------------------------------------#
#----------------------------------------------------------------------------#
# Estimating power under single kernel test
out.row.col1 <- Single.MMD(n[k], d, p,kernel.choice[1], n.iter)
cat(paste("Single Kernel-1 in iteration",out.row.col1," ",k,"\n"), file="log.txt", append=TRUE)
out.row.col2 <- Single.MMD(n[k], d, p,kernel.choice[2], n.iter)
cat(paste("Single Kernel-2 in iteration",out.row.col2," ",k,"\n"), file="log.txt", append=TRUE)
# Estimating power under multiple kernel test
out.row.col3 <- Multi.MMD(n[k], d, p,kernel.choice[3], n.iter)
cat(paste("Multiple Kernel-1 in iteration",out.row.col3," ",k,"\n"), file="log.txt", append=TRUE)
out.row.col4 <- Multi.MMD(n[k], d, p,kernel.choice[4], n.iter)
cat(paste("Multiple Kernel-2 in iteration",out.row.col4," ",k,"\n"), file="log.txt", append=TRUE)
out.row.col5 <- Multi.MMD(n[k], d, p,kernel.choice[5], n.iter)
cat(paste("Multiple Kernel-3 in iteration",out.row.col5," ",k,"\n"), file="log.txt", append=TRUE)
# Concatenating all the outputs
out.row <- c(n[k],out.row.col1, out.row.col2, out.row.col3, out.row.col4,
out.row.col5)
out.compare <- rbind(out.compare, out.row)
}
out.compare <- as.data.frame(out.compare)
colnames(out.compare) <- c("Sample Size","Single Kernel-1","Single Kernel-2",
"Multiple Kernel-1", "Multiple Kernel-2",
"Multiple Kernel-3")
n.iter <- 100
out.compare <- c()
for (k in 1:length(n)){
#--------------------------------------------------------------------------#
library(LaplacesDemon)
library(Rfast)
#--------------------------------------------------------------------------#
# Creating a log file to keep track of progress
#cat(paste("\n","Starting iteration",k,"\n"),
#    file="log.txt", append=TRUE)
#--------------------------------------------------------------------------#
# Sigma0 matrix <- cov matrix under H0
#Sigma0 <- matrix(0, nrow = d, ncol = d)
#for(i in 1:d){
#  for(j in 1:d){
#    Sigma0[i,j] = sigma.param^(abs(i-j))
#  }
#}
Sigma0 <- diag(sigma.param, d, d)
# cov matrix under H0
Sigma1 <- sigma.mult*Sigma0
#--------------------------------------------------------------------------#
#--------------------------------------------------------------------------#
# mean vector under H0
mu0 <- rep(0, d)
# mean vector under H1
mu1 <- rep(mu.param, d)
#----------------------------------------------------------------------------#
#----------------------------------------------------------------------------#
# Estimating power under single kernel test
out.row.col1 <- Single.MMD(n[k], d, p,kernel.choice[1], n.iter)
cat(paste("Single Kernel-1 in iteration",out.row.col1," ",k,"\n"), file="log.txt", append=TRUE)
out.row.col2 <- Single.MMD(n[k], d, p,kernel.choice[2], n.iter)
cat(paste("Single Kernel-2 in iteration",out.row.col2," ",k,"\n"), file="log.txt", append=TRUE)
# Estimating power under multiple kernel test
out.row.col3 <- Multi.MMD(n[k], d, p,kernel.choice[3], n.iter)
cat(paste("Multiple Kernel-1 in iteration",out.row.col3," ",k,"\n"), file="log.txt", append=TRUE)
out.row.col4 <- Multi.MMD(n[k], d, p,kernel.choice[4], n.iter)
cat(paste("Multiple Kernel-2 in iteration",out.row.col4," ",k,"\n"), file="log.txt", append=TRUE)
out.row.col5 <- Multi.MMD(n[k], d, p,kernel.choice[5], n.iter)
cat(paste("Multiple Kernel-3 in iteration",out.row.col5," ",k,"\n"), file="log.txt", append=TRUE)
# Concatenating all the outputs
out.row <- c(n[k],out.row.col1, out.row.col2, out.row.col3, out.row.col4,
out.row.col5)
out.compare <- rbind(out.compare, out.row)
}
out.compare <- as.data.frame(out.compare)
colnames(out.compare) <- c("Sample Size","Single Kernel-1","Single Kernel-2",
"Multiple Kernel-1", "Multiple Kernel-2",
"Multiple Kernel-3")
out.compare
# Number of repetitions
n.rep <- 1
# Number of data points
n.seq <- c(100, 200)
# Dimension vector of data
d <- 5
# probability of mixture
p <- 0
# parameter for sigma0 matrix generation
sigma.param <- 1
# parameter for sigma1 = c*sigma0 matrix generation
sigma.mult <- 1.15
# parameter for mean value for H1 distribution
mu.param <- 0
# 1st coordinate for single, 2nd for multiple
kernel.choice <- c("LAP","GAUSS", "LAP","GEXP", "MIXED")
# Libraries for parallelising
library(foreach)
library(doParallel)
cores <- detectCores()
cl <- makeCluster(cores[1]-1) #not to overload your computer
registerDoParallel(cl)
power.d(n.seq, sigma.param = sigma.param, sigma.mult = sigma.mult,
mu.param = mu.param, d, p = p,
kernel.choice = kernel.choice, n.iter = 100)
source("~/.active-rstudio-document", echo=TRUE)
power.d(n.seq, sigma.param = sigma.param, sigma.mult = sigma.mult,
mu.param = mu.param, d, p = p,
kernel.choice = kernel.choice, n.iter = 100)
source("~/.active-rstudio-document", echo=TRUE)
power.d(n.seq, sigma.param = sigma.param, sigma.mult = sigma.mult,
mu.param = mu.param, d, p = p,
kernel.choice = kernel.choice, n.iter = 100)
source("~/.active-rstudio-document", echo=TRUE)
power.d(n.seq, sigma.param = sigma.param, sigma.mult = sigma.mult,
mu.param = mu.param, d, p = p,
kernel.choice = kernel.choice, n.iter = 100)
setwd("C:/Users/anirbanc/Dropbox (Penn)/Kernel-Two-Sample/Simulations/POWER/OVER SIGMA MULTIPLIER")
setwd("C:/Users/anirbanc/Dropbox (Penn)/Kernel-Two-Sample/Simulations/DIM 2 - OVER SAMPLE SIZE - IDENTITY/TYPE-I ERROR/Results")
setwd("C:/Users/anirbanc/Dropbox (Penn)/Kernel-Two-Sample/Simulations/DIM 2 - OVER SAMPLE SIZE - IDENTITY/TYPE-I ERROR/Results")
library(tidyverse)
# read the power values
multi1 <- read_csv("MultiPower-LAP.csv")[,-c(1,2)]
multi2 <- read_csv("MultiPower-GEXP.csv")[,-c(1,2)]
multi3 <- read_csv("MultiPower-MIXED.csv")[,-c(1,2)]
single1 <- read_csv("SinglePower-LAP.csv")[,-c(1,2)]
single2 <- read_csv("SinglePower-GAUSS.csv")[,-c(1,2)]
FR <- read_csv("Power-FR.csv")[,-c(1,2)]
# mean of power values
multi1.mean <- apply(multi1, 1, mean)
multi2.mean <- apply(multi2, 1, mean)
multi3.mean <- apply(multi3, 1, mean)
single1.mean <- apply(single1, 1, mean)
single2.mean <- apply(single2, 1, mean)
FR.mean <- apply(FR, 1, mean)
# sd of power values
#multi1.sd <- apply(multi1, 1, sd)
#multi2.sd <- apply(multi2, 1, sd)
#multi3.sd <- apply(multi3, 1, sd)
#single1.sd <- apply(single1, 1, sd)
#single2.sd <- apply(single2, 1, sd)
# upper and lower ranges of multiple kernel power
#multi1.up <- multi1.mean + multi1.sd
#multi1.low <- multi1.mean - multi1.sd
#multi2.up <- multi2.mean + multi2.sd
#multi2.low <- multi2.mean - multi2.sd
#multi3.up <- multi3.mean + multi3.sd
#multi3.low <- multi3.mean - multi3.sd
# upper and lower ranges of single kernel power
#single1.low <- single1.mean - single1.sd
#single1.up <- single1.mean + single1.sd
#single2.low <- single2.mean - single2.sd
#single2.up <- single2.mean + single2.sd
d <- (read_csv("MultiPower-GEXP.csv")[2])%>%pull(1)
power.tibble <- tibble(power = c(single1.mean,single2.mean, multi1.mean,
multi2.mean, multi3.mean, FR.mean),
#up = c(single1.up,single2.up, multi1.up, multi2.up,
#       multi3.up),
#low = c(single1.low,single2.low, multi1.low, multi2.low,
#        multi3.low),
dim = c(d,d,d,d,d,d),
group = c(rep("Single Laplace Kernel", length(d)),
rep("Single Gaussian Kernel", length(d)),
rep("Multiple Laplace Kernels", length(d)),
rep("Multiple Gaussian Kernels", length(d)),
rep("Multiple Mixed Kernels", length(d)),
rep("Friedman Rafsky", length(d))))
# plotting the power along with sd
(power.plot <- power.tibble %>%
ggplot(aes(x = dim, y = power, group = group, col = group, fill = group)) +
geom_point(size = 2) +
geom_line(size = 1) +
geom_line(aes(y = 0.05), size = 0.5, col = "brown") +
#geom_ribbon(aes(ymin = low, ymax = up), alpha = 0.3, linetype = 0)+
labs(x = "Sample Size", y = "Power", color = "Test", fill = "Test") +
theme_bw()
)
# saving the plot
ggsave(plot = power.plot, filename = "SCale-Gaussian-TypeIPlot.pdf", device = "pdf",
width = 5, height = 3)
# saving the plot
ggsave(plot = power.plot, filename = "SCale-Gaussian-TypeIPlot.pdf", device = "pdf",
width = 3, height = 1)
# saving the plot
ggsave(plot = power.plot, filename = "SCale-Gaussian-TypeIPlot.pdf", device = "pdf",
width = 4, height = 2)
# saving the plot
ggsave(plot = power.plot, filename = "SCale-Gaussian-TypeIPlot.pdf", device = "pdf",
width = 5, height = 3)
# plotting the power along with sd
(power.plot <- power.tibble %>%
ggplot(aes(x = dim, y = power, group = group, col = group, fill = group)) +
geom_point(size = 2) +
geom_line(size = 1) +
geom_line(aes(y = 0.05), size = 0.5, col = "brown") +
#geom_ribbon(aes(ymin = low, ymax = up), alpha = 0.3, linetype = 0)+
labs(x = "Sample Size", y = "Type-I Error", color = "Test", fill = "Test") +
theme_bw()
)
# saving the plot
ggsave(plot = power.plot, filename = "SCale-Gaussian-TypeIPlot.pdf", device = "pdf",
width = 5, height = 3)
source("~/.active-rstudio-document", echo=TRUE)
start <- Sys.time()
# Number of repetitions
n.rep <- 1
# Number of data points
n.seq <- c(50, 100, 200, 300, 400, 500, 600, 700)
# Dimension vector of data
d <- 5
# probability of mixture
p <- 0
# parameter for sigma0 matrix generation
sigma.param <- 1
# parameter for sigma1 = c*sigma0 matrix generation
sigma.mult <- 1.15
# parameter for mean value for H1 distribution
mu.param <- 0
#------------------------------------------------------------------------------#
#------------------------------------------------------------------------------#
# storing power values for each dimensions
# Libraries for parallelising
library(foreach)
library(doParallel)
#library(snow)
#cores <- strtoi(Sys.getenv("NSLOTS"))-1
#cl <- makeCluster(cores, methods = FALSE, type = "MPI")
#registerDoParallel(cl)
cores <- detectCores()
cl <- makeCluster(cores[1]-1) #not to overload your computer
registerDoParallel(cl)
out.d <- c()
for (iter in 1:n.rep){
# storing power values for particular iteration
out.d.iter <- power.d(n.seq, sigma.param = sigma.param, sigma.mult = sigma.mult,
mu.param = mu.param, d = d, p = p, n.iter = 500)
out.d <- c(out.d, out.d.iter)
print (iter)
}
out.d <- as.matrix(as.data.frame(out.d))
end <- Sys.time()
end-start
stopCluster(cl)
out.d
start <- Sys.time()
# Number of repetitions
n.rep <- 1
# Number of data points
n.seq <- c(50, 100, 200, 300, 400, 500, 600, 700)
# Dimension vector of data
d <- 5
# probability of mixture
p <- 0
# parameter for sigma0 matrix generation
sigma.param <- 1
# parameter for sigma1 = c*sigma0 matrix generation
sigma.mult <- 1
# parameter for mean value for H1 distribution
mu.param <- 0
#------------------------------------------------------------------------------#
#------------------------------------------------------------------------------#
# storing power values for each dimensions
# Libraries for parallelising
library(foreach)
library(doParallel)
#library(snow)
#cores <- strtoi(Sys.getenv("NSLOTS"))-1
#cl <- makeCluster(cores, methods = FALSE, type = "MPI")
#registerDoParallel(cl)
cores <- detectCores()
cl <- makeCluster(cores[1]-1) #not to overload your computer
registerDoParallel(cl)
out.d <- c()
for (iter in 1:n.rep){
# storing power values for particular iteration
out.d.iter <- power.d(n.seq, sigma.param = sigma.param, sigma.mult = sigma.mult,
mu.param = mu.param, d = d, p = p, n.iter = 500)
out.d <- c(out.d, out.d.iter)
print (iter)
}
out.d <- as.matrix(as.data.frame(out.d))
end <- Sys.time()
end-start
stopCluster(cl)
out.d
GEXP<-read.csv("MultiPower-GEXP.csv")
LAPMultiple<-read.csv("MultiPower-LAP.csv")
Mixed<-read.csv("MultiPower-MIXED.csv")
FR<-read.csv("Power-FR.csv")
GAUSSSingle<-read.csv("SinglePower-GAUSS.csv")
LAPLACESingle<-read.csv("SinglePower-LAP.csv")
d=GEXP[,2]
pdf(file="GaussianScaleTypeISampleSize.pdf")
plot(d, apply(GEXP[,-c(1,2)], 1, mean), type='b', col=1, pch=1, lwd=1.5, ylim=c(0, 0.85), xlab="Sample Size",
ylab='Type I Error', main="Gaussian Scale ")
points(d, apply(LAPMultiple[,-c(1,2)], 1, mean), type='b', col=2, pch=2, lwd=1.5)
points(d, apply(Mixed[,-c(1,2)], 1, mean), type='b', col=3, pch=3, lwd=1.5)
points(d, apply(FR[,-c(1,2)], 1, mean), type='b', col=4, pch=4, lwd=1.5)
points(d, apply(GAUSSSingle[,-c(1,2)], 1, mean), type='b', col=5, pch=5, lwd=1.5)
points(d, apply(LAPLACESingle[,-c(1,2)], 1, mean), type='b', col=6, pch=6, lwd=1.5)
legend("topleft", c("Gauss MMMD", "LAP MMMD", "Mixed MMMD", "FR", "Gauss MMD", "LAP MMD"), col=c(1,2,3,4,5,6),
pch = c(1, 2, 3, 4, 5, 6), bg = 'gray90')
dev.off()
GEXP<-read.csv("MultiPower-GEXP.csv")
LAPMultiple<-read.csv("MultiPower-LAP.csv")
Mixed<-read.csv("MultiPower-MIXED.csv")
FR<-read.csv("Power-FR.csv")
GAUSSSingle<-read.csv("SinglePower-GAUSS.csv")
LAPLACESingle<-read.csv("SinglePower-LAP.csv")
d=GEXP[,2]
pdf(file="GaussianScaleTypeISampleSize.pdf")
plot(d, apply(GEXP[,-c(1,2)], 1, mean), type='b', col=1, pch=1, lwd=1.5, ylim=c(0, 0.1), xlab="Sample Size",
ylab='Type I Error', main="Gaussian Scale ")
points(d, apply(LAPMultiple[,-c(1,2)], 1, mean), type='b', col=2, pch=2, lwd=1.5)
points(d, apply(Mixed[,-c(1,2)], 1, mean), type='b', col=3, pch=3, lwd=1.5)
points(d, apply(FR[,-c(1,2)], 1, mean), type='b', col=4, pch=4, lwd=1.5)
points(d, apply(GAUSSSingle[,-c(1,2)], 1, mean), type='b', col=5, pch=5, lwd=1.5)
points(d, apply(LAPLACESingle[,-c(1,2)], 1, mean), type='b', col=6, pch=6, lwd=1.5)
legend("topleft", c("Gauss MMMD", "LAP MMMD", "Mixed MMMD", "FR", "Gauss MMD", "LAP MMD"), col=c(1,2,3,4,5,6),
pch = c(1, 2, 3, 4, 5, 6), bg = 'gray90')
dev.off()
GEXP<-read.csv("MultiPower-GEXP.csv")
LAPMultiple<-read.csv("MultiPower-LAP.csv")
Mixed<-read.csv("MultiPower-MIXED.csv")
FR<-read.csv("Power-FR.csv")
GAUSSSingle<-read.csv("SinglePower-GAUSS.csv")
LAPLACESingle<-read.csv("SinglePower-LAP.csv")
d=GEXP[,2]
pdf(file="GaussianScaleTypeISampleSize.pdf")
plot(d, apply(GEXP[,-c(1,2)], 1, mean), type='b', col=1, pch=1, lwd=1.5, ylim=c(0, 0.1), xlab="Sample Size",
ylab='Type I Error', main="Gaussian Scale ")
points(d, apply(LAPMultiple[,-c(1,2)], 1, mean), type='b', col=2, pch=2, lwd=1.5)
points(d, apply(Mixed[,-c(1,2)], 1, mean), type='b', col=3, pch=3, lwd=1.5)
points(d, apply(FR[,-c(1,2)], 1, mean), type='b', col=4, pch=4, lwd=1.5)
points(d, apply(GAUSSSingle[,-c(1,2)], 1, mean), type='b', col=5, pch=5, lwd=1.5)
points(d, apply(LAPLACESingle[,-c(1,2)], 1, mean), type='b', col=6, pch=6, lwd=1.5)
abline(h=0.05, col=7, lwd=2)
legend("topleft", c("Gauss MMMD", "LAP MMMD", "Mixed MMMD", "FR", "Gauss MMD", "LAP MMD"), col=c(1,2,3,4,5,6),
pch = c(1, 2, 3, 4, 5, 6), bg = 'gray90')
dev.off()
GEXP<-read.csv("MultiPower-GEXP.csv")
LAPMultiple<-read.csv("MultiPower-LAP.csv")
Mixed<-read.csv("MultiPower-MIXED.csv")
FR<-read.csv("Power-FR.csv")
GAUSSSingle<-read.csv("SinglePower-GAUSS.csv")
LAPLACESingle<-read.csv("SinglePower-LAP.csv")
d=GEXP[,2]
pdf(file="GaussianScaleTypeISampleSize.pdf")
plot(d, apply(GEXP[,-c(1,2)], 1, mean), type='b', col=1, pch=1, lwd=1.5, ylim=c(0, 0.1), xlab="Sample Size",
ylab='Type I Error', main="Gaussian Scale ")
points(d, apply(LAPMultiple[,-c(1,2)], 1, mean), type='b', col=2, pch=2, lwd=1.5)
points(d, apply(Mixed[,-c(1,2)], 1, mean), type='b', col=3, pch=3, lwd=1.5)
points(d, apply(FR[,-c(1,2)], 1, mean), type='b', col=4, pch=4, lwd=1.5)
points(d, apply(GAUSSSingle[,-c(1,2)], 1, mean), type='b', col=5, pch=5, lwd=1.5)
points(d, apply(LAPLACESingle[,-c(1,2)], 1, mean), type='b', col=6, pch=6, lwd=1.5)
abline(h=0.05, col=7, lty=2, lwd=2)
legend("topleft", c("Gauss MMMD", "LAP MMMD", "Mixed MMMD", "FR", "Gauss MMD", "LAP MMD"), col=c(1,2,3,4,5,6),
pch = c(1, 2, 3, 4, 5, 6), bg = 'gray90')
dev.off()
GEXP<-read.csv("MultiPower-GEXP.csv")
LAPMultiple<-read.csv("MultiPower-LAP.csv")
Mixed<-read.csv("MultiPower-MIXED.csv")
FR<-read.csv("Power-FR.csv")
GAUSSSingle<-read.csv("SinglePower-GAUSS.csv")
LAPLACESingle<-read.csv("SinglePower-LAP.csv")
d=GEXP[,2]
pdf(file="GaussianScaleTypeISampleSize.pdf")
plot(d, apply(GEXP[,-c(1,2)], 1, mean), type='b', col=1, pch=1, lwd=1.5, ylim=c(0, 0.1), xlab="Sample Size",
ylab='Type I Error', main="Gaussian Location-Scale ")
points(d, apply(LAPMultiple[,-c(1,2)], 1, mean), type='b', col=2, pch=2, lwd=1.5)
points(d, apply(Mixed[,-c(1,2)], 1, mean), type='b', col=3, pch=3, lwd=1.5)
points(d, apply(FR[,-c(1,2)], 1, mean), type='b', col=4, pch=4, lwd=1.5)
points(d, apply(GAUSSSingle[,-c(1,2)], 1, mean), type='b', col=5, pch=5, lwd=1.5)
points(d, apply(LAPLACESingle[,-c(1,2)], 1, mean), type='b', col=6, pch=6, lwd=1.5)
abline(h=0.05, col=7, lty=2, lwd=2)
legend("topleft", c("Gauss MMMD", "LAP MMMD", "Mixed MMMD", "FR", "Gauss MMD", "LAP MMD"), col=c(1,2,3,4,5,6),
pch = c(1, 2, 3, 4, 5, 6), bg = 'gray90')
dev.off()
source("~/Dropbox (Penn)/Kernel-Two-Sample/Simulations/DIM 2 - OVER SAMPLE SIZE - IDENTITY/TYPE-I ERROR/Results/Figure.R", echo=TRUE)
