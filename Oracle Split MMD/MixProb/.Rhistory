multi.H0.cutoff(n, X, kernel.vec,
inv.cov.samp,
n.iter = n.est)
multi.H0.cutoff(n, X, kernel.vec,
inv.cov.samp,
n.iter = n.est)
multi.H0.cutoff(n, X, kernel.vec,
inv.cov.samp,
n.iter = n.est)
multi.H0.cutoff(n, X, kernel.vec,
inv.cov.samp,
n.iter = n.est)
multi.H0.cutoff(n, X, kernel.vec,
inv.cov.samp,
n.iter = n.est)
multi.H0.cutoff(n, X, kernel.vec,
inv.cov.samp,
n.iter = n.est)
multi.H0.cutoff(n, X, kernel.vec,
inv.cov.samp,
n.iter = n.est)
multi.H0.cutoff(n, X, kernel.vec,
inv.cov.samp,
n.iter = n.est)
multi.H0.cutoff(n, X, kernel.vec,
inv.cov.samp,
n.iter = n.est)
multi.H0.cutoff(n, X, kernel.vec,
inv.cov.samp,
n.iter = n.est)
multi.H0.cutoff(n, X, kernel.vec,
inv.cov.samp,
n.iter = n.est)
multi.H0.cutoff(n, X, kernel.vec,
inv.cov.samp,
n.iter = n.est)
multi.H0.cutoff(n, X, kernel.vec,
inv.cov.samp,
n.iter = n.est)
multi.H0.cutoff(n, X, kernel.vec,
inv.cov.samp,
n.iter = n.est)
multi.H0.cutoff(n, X, kernel.vec,
inv.cov.samp,
n.iter = n.est)
multi.H0.cutoff(n, X, kernel.vec,
inv.cov.samp,
n.iter = n.est)
multi.H0.cutoff(n, X, kernel.vec,
inv.cov.samp,
n.iter = n.est)
multi.H0.cutoff <- function(n, x, k.vec, invcov.mat, n.iter = 1000){
##############################################################################
# input: n <- number of samples
#        x <- dataset under H0
#        k.vec <- list of considered kernels
#        n.iter <- number of iterations needed to estimate cut-off
# output: H0.thresh <- upper alpha level threshold
##############################################################################
require(psych)
k.len <- length(k.vec)
# C <- diag(1, nrow = n, ncol = n) - (1/n)*matrix(1, nrow = n, ncol = n)
kvec.mat <- vector("list", k.len)
for (i in 1:k.len){
current.kmat <- kernlab::kernelMatrix(k.vec[[i]], x)
current.kmat.colsums <- colSums(current.kmat)
kvec.mat[[i]] <- (1/n) * (current.kmat - (1/n) * t(t(rep(1, n))) %*% t(current.kmat.colsums) -
(1/n) * t(t(current.kmat.colsums)) %*% t(rep(1, n)) +
(1/n^2) * matrix(sum(current.kmat), n, n))
# kvec.mat[[i]] <- (1/n)*(C%*%kernlab::kernelMatrix(k.vec[[i]], x)%*%C)
}
invcov.mat.est <- invcov.mat
start <- Sys.time()
u.mat <- MASS::mvrnorm(n.iter, mu = rep(0,n),
Sigma = diag(2, nrow = n, ncol = n))
Sys.time() - start
start <- Sys.time()
test.kernel.mat <- mcsapply(kvec.mat, multi.k.approx.stat, u.mat = u.mat)
Sys.time() - start
test.stat <- apply(test.kernel.mat, 1, multi.func, param = invcov.mat.est)
H0.thresh <- quantile(test.stat, probs = 0.95)
return (H0.thresh)
}
multi.H0.cutoff(n, X, kernel.vec,
inv.cov.samp,
n.iter = n.est)
multi.H0.cutoff(n, X, kernel.vec,
inv.cov.samp,
n.iter = n.est)
multi.H0.cutoff(n, X, kernel.vec,
inv.cov.samp,
n.iter = n.est)
multi.H0.cutoff(n, X, kernel.vec,
inv.cov.samp,
n.iter = n.est)
multi.H0.cutoff(n, X, kernel.vec,
inv.cov.samp,
n.iter = n.est)
multi.H0.cutoff(n, X, kernel.vec,
inv.cov.samp,
n.iter = n.est)
multi.H0.cutoff(n, X, kernel.vec,
inv.cov.samp,
n.iter = n.est)
multi.H0.cutoff(n, X, kernel.vec,
inv.cov.samp,
n.iter = n.est)
multi.H0.cutoff(n, X, kernel.vec,
inv.cov.samp,
n.iter = n.est)
multi.H0.cutoff(n, X, kernel.vec,
inv.cov.samp,
n.iter = n.est)
multi.H0.cutoff(n, X, kernel.vec,
inv.cov.samp,
n.iter = n.est)
multi.H0.cutoff(n, X, kernel.vec,
inv.cov.samp,
n.iter = n.est)
multi.H0.cutoff(n, X, kernel.vec,
inv.cov.samp,
n.iter = n.est)
multi.H0.cutoff(n, X, kernel.vec,
inv.cov.samp,
n.iter = n.est)
multi.H0.cutoff(n, X, kernel.vec,
inv.cov.samp,
n.iter = n.est)
multi.H0.cutoff(n, X, kernel.vec,
inv.cov.samp,
n.iter = n.est)
multi.H0.cutoff(n, X, kernel.vec,
inv.cov.samp,
n.iter = n.est)
multi.H0.cutoff(n, X, kernel.vec,
inv.cov.samp,
n.iter = n.est)
multi.H0.cutoff(n, X, kernel.vec,
inv.cov.samp,
n.iter = n.est)
multi.H0.cutoff(n, X, kernel.vec,
inv.cov.samp,
n.iter = n.est)
multi.H0.cutoff(n, X, kernel.vec,
inv.cov.samp,
n.iter = n.est)
multi.H0.cutoff(n, X, kernel.vec,
inv.cov.samp,
n.iter = n.est)
multi.H0.cutoff(n, X, kernel.vec,
inv.cov.samp,
n.iter = n.est)
multi.H0.cutoff(n, X, kernel.vec,
inv.cov.samp,
n.iter = n.est)
multi.H0.cutoff(n, X, kernel.vec,
inv.cov.samp,
n.iter = n.est)
multi.H0.cutoff(n, X, kernel.vec,
inv.cov.samp,
n.iter = n.est)
multi.H0.cutoff(n, X, kernel.vec,
inv.cov.samp,
n.iter = n.est)
multi.H0.cutoff <- function(n, x, k.vec, invcov.mat, n.iter = 1000){
##############################################################################
# input: n <- number of samples
#        x <- dataset under H0
#        k.vec <- list of considered kernels
#        n.iter <- number of iterations needed to estimate cut-off
# output: H0.thresh <- upper alpha level threshold
##############################################################################
require(psych)
k.len <- length(k.vec)
# C <- diag(1, nrow = n, ncol = n) - (1/n)*matrix(1, nrow = n, ncol = n)
kvec.mat <- vector("list", k.len)
for (i in 1:k.len){
current.kmat <- kernlab::kernelMatrix(k.vec[[i]], x)
current.kmat.colsums <- colSums(current.kmat)
kvec.mat[[i]] <- (1/n) * (current.kmat - (1/n) * t(t(rep(1, n))) %*% t(current.kmat.colsums) -
(1/n) * t(t(current.kmat.colsums)) %*% t(rep(1, n)) +
(1/n^2) * matrix(sum(current.kmat), n, n))
# kvec.mat[[i]] <- (1/n)*(C%*%kernlab::kernelMatrix(k.vec[[i]], x)%*%C)
}
invcov.mat.est <- invcov.mat
start <- Sys.time()
u.mat <- MASS::mvrnorm(n.iter, mu = rep(0,n),
Sigma = diag(2, nrow = n, ncol = n))
print(Sys.time() - start)
start <- Sys.time()
test.kernel.mat <- mcsapply(kvec.mat, multi.k.approx.stat, u.mat = u.mat)
print(Sys.time() - start)
test.stat <- apply(test.kernel.mat, 1, multi.func, param = invcov.mat.est)
H0.thresh <- quantile(test.stat, probs = 0.95)
return (H0.thresh)
}
multi.H0.cutoff(n, X, kernel.vec,
inv.cov.samp,
n.iter = n.est)
multi.H0.cutoff <- function(n, x, k.vec, invcov.mat, n.iter = 1000){
##############################################################################
# input: n <- number of samples
#        x <- dataset under H0
#        k.vec <- list of considered kernels
#        n.iter <- number of iterations needed to estimate cut-off
# output: H0.thresh <- upper alpha level threshold
##############################################################################
require(psych)
k.len <- length(k.vec)
# C <- diag(1, nrow = n, ncol = n) - (1/n)*matrix(1, nrow = n, ncol = n)
kvec.mat <- vector("list", k.len)
start <- Sys.time()
for (i in 1:k.len){
current.kmat <- kernlab::kernelMatrix(k.vec[[i]], x)
current.kmat.colsums <- colSums(current.kmat)
kvec.mat[[i]] <- (1/n) * (current.kmat - (1/n) * t(t(rep(1, n))) %*% t(current.kmat.colsums) -
(1/n) * t(t(current.kmat.colsums)) %*% t(rep(1, n)) +
(1/n^2) * matrix(sum(current.kmat), n, n))
# kvec.mat[[i]] <- (1/n)*(C%*%kernlab::kernelMatrix(k.vec[[i]], x)%*%C)
}
print(Sys.time() - start)
invcov.mat.est <- invcov.mat
start <- Sys.time()
u.mat <- MASS::mvrnorm(n.iter, mu = rep(0,n),
Sigma = diag(2, nrow = n, ncol = n))
print(Sys.time() - start)
start <- Sys.time()
test.kernel.mat <- mcsapply(kvec.mat, multi.k.approx.stat, u.mat = u.mat)
print(Sys.time() - start)
test.stat <- apply(test.kernel.mat, 1, multi.func, param = invcov.mat.est)
H0.thresh <- quantile(test.stat, probs = 0.95)
return (H0.thresh)
}
multi.H0.cutoff(n, X, kernel.vec,
inv.cov.samp,
n.iter = n.est)
multi.H0.cutoff(n, X, kernel.vec,
inv.cov.samp,
n.iter = n.est)
multi.H0.cutoff(n, X, kernel.vec,
inv.cov.samp,
n.iter = n.est)
multi.H0.cutoff(n, X, kernel.vec,
inv.cov.samp,
n.iter = n.est)
multi.H0.cutoff <- function(n, x, k.vec, invcov.mat, n.iter = 1000){
##############################################################################
# input: n <- number of samples
#        x <- dataset under H0
#        k.vec <- list of considered kernels
#        n.iter <- number of iterations needed to estimate cut-off
# output: H0.thresh <- upper alpha level threshold
##############################################################################
require(psych)
k.len <- length(k.vec)
# C <- diag(1, nrow = n, ncol = n) - (1/n)*matrix(1, nrow = n, ncol = n)
kvec.mat <- vector("list", k.len)
start <- Sys.time()
for (i in 1:k.len){
current.kmat <- kernlab::kernelMatrix(k.vec[[i]], x)
current.kmat.colsums <- colSums(current.kmat)
kvec.mat[[i]] <- (1/n) * (current.kmat - (1/n) * t(t(rep(1, n))) %*% t(current.kmat.colsums) -
(1/n) * t(t(current.kmat.colsums)) %*% t(rep(1, n)) +
(1/n^2) * matrix(sum(current.kmat), n, n))
# kvec.mat[[i]] <- (1/n)*(C%*%kernlab::kernelMatrix(k.vec[[i]], x)%*%C)
}
print(Sys.time() - start)
invcov.mat.est <- invcov.mat
start <- Sys.time()
u.mat <- MASS::mvrnorm(n.iter, mu = rep(0,n),
Sigma = diag(2, nrow = n, ncol = n))
print(Sys.time() - start)
start <- Sys.time()
test.kernel.mat <- mcsapply(kvec.mat, multi.k.approx.stat, u.mat = u.mat)
print(Sys.time() - start)
start <- Sys.time()
test.stat <- apply(test.kernel.mat, 1, multi.func, param = invcov.mat.est)
print (Sys.time() - start)
H0.thresh <- quantile(test.stat, probs = 0.95)
return (H0.thresh)
}
multi.H0.cutoff(n, X, kernel.vec,
inv.cov.samp,
n.iter = n.est)
n.perm
perm.rows <- t(mcsapply(1:n.perm, function(x){sample(2*m)}))
View(perm.rows)
m <- n
perm.rows <- t(mcsapply(1:n.perm, function(x){sample(2*m)}))
pooled.samp <- rbind(X,Y)
View(pooled.samp)
x <- 1
pooled.samp[perm.rows[x,1:m],]
View(pooled.samp)
multi.perm.test <- function(m, x.perm, y.perm, kernel.vec){
start <- Sys.time()
mmd.perm.vec <- m*compute.MMD.vec(x.perm, y.perm, kernel.vec)
print (Sys.time() - start)
# inv.cov <- Rfast::spdinv(est.cov(m, x.perm, kernel.vec))
inv.cov <- matrix(0, length(kernel.vec), length(kernel.vec))
start <- Sys.time()
mmd.perm.func <- multi.func(mmd.perm.vec, param = inv.cov)
print (Sys.time() - start)
return (mmd.perm.func)
}
multi.perm.test(m,
pooled.samp[perm.rows[x,1:m],],
pooled.samp[perm.rows[x,(m+1):(2*m)],],
kernel.vec)
inv.cov.samp <- Rfast::spdinv(est.cov(m,X,kernel.vec))
MMD.samp.val <- m*compute.MMD.vec(X, Y, kernel.vec)
MMD.samp.func <- multi.func(MMD.samp.val,
param = inv.cov.samp)
mcsapply(1:n.perm, function(x){multi.perm.test(m,
pooled.samp[perm.rows[x,1:m],],
pooled.samp[perm.rows[x,(m+1):(2*m)],],
kernel.vec) >= mmd.samp.func})
mmd.samp.func <- MMD.samp.func
mcsapply(1:n.perm, function(x){multi.perm.test(m,
pooled.samp[perm.rows[x,1:m],],
pooled.samp[perm.rows[x,(m+1):(2*m)],],
kernel.vec) >= mmd.samp.func})
multi.perm.test <- function(m, x.perm, y.perm, kernel.vec){
start <- Sys.time()
mmd.perm.vec <- m*compute.MMD.vec(x.perm, y.perm, kernel.vec)
print (Sys.time() - start)
start <- Sys.time()
inv.cov <- Rfast::spdinv(est.cov(m, x.perm, kernel.vec))
print (Sys.time() - start)
# inv.cov <- matrix(0, length(kernel.vec), length(kernel.vec))
start <- Sys.time()
mmd.perm.func <- multi.func(mmd.perm.vec, param = inv.cov)
print (Sys.time() - start)
return (mmd.perm.func)
}
multi.perm.test(m,
pooled.samp[perm.rows[x,1:m],],
pooled.samp[perm.rows[x,(m+1):(2*m)],],
kernel.vec)
start <- Sys.time()
mcsapply(1:n.perm, function(x){multi.perm.test(m,
pooled.samp[perm.rows[x,1:m],],
pooled.samp[perm.rows[x,(m+1):(2*m)],],
kernel.vec) >= mmd.samp.func})
Sys.time() - start
source("~/.active-rstudio-document", echo=TRUE)
start <- Sys.time()
sum(mcsapply(1:n.perm, function(x){multi.perm.test(m,
pooled.samp[perm.rows[x,1:m],],
pooled.samp[perm.rows[x,(m+1):(2*m)],],
kernel.vec) >= mmd.samp.func}))
Sys.time() - start
multi.perm.test(m,
pooled.samp[perm.rows[x,1:m],],
pooled.samp[perm.rows[x,(m+1):(2*m)],],
kernel.vec)
multi.perm.test <- function(m, x.perm, y.perm, kernel.vec){
start <- Sys.time()
mmd.perm.vec <- m*compute.MMD.vec(x.perm, y.perm, kernel.vec)
print (Sys.time() - start)
start <- Sys.time()
# inv.cov <- Rfast::spdinv(est.cov(m, x.perm, kernel.vec))
inv.cov <- matrix(0, length(kernel.vec), length(kernel.vec))
print (Sys.time() - start)
start <- Sys.time()
mmd.perm.func <- multi.func(mmd.perm.vec, param = inv.cov)
print (Sys.time() - start)
return (mmd.perm.func)
}
multi.perm.test(m,
pooled.samp[perm.rows[x,1:m],],
pooled.samp[perm.rows[x,(m+1):(2*m)],],
kernel.vec)
multi.H0.cutoff(n, X, kernel.vec,
inv.cov.samp,
n.iter = n.est)
start <- Sys.time()
t(matrix(1, 100, 200)) %*% matrix(1, 200, 200) %*% matrix(1, 100, 200)
start <- Sys.time()
t(matrix(1, 100, 200)) * (matrix(1, 200, 200) %*% matrix(1, 100, 200))
start <- Sys.time()
matrix(1, 100, 200) * (matrix(1, 200, 200) %*% matrix(1, 100, 200))
start <- Sys.time()
t(matrix(1, 100, 200)) * (matrix(1, 200, 200) %*% t(matrix(1, 100, 200)))
# multi.k.approx.stat(matrix(1, 200, 200), matrix(1, 500, 200))
Sys.time() - start
start <- Sys.time()
colSums(t(matrix(1, 100, 200)) * (matrix(1, 200, 200) %*% t(matrix(1, 100, 200))))
# multi.k.approx.stat(matrix(1, 200, 200), matrix(1, 500, 200))
Sys.time() - start
start <- Sys.time()
colSums(t(matrix(1, 100, 200)) * (matrix(1, 200, 200) %*% t(matrix(1, 100, 200))))
# multi.k.approx.stat(matrix(1, 200, 200), matrix(1, 500, 200))
Sys.time() - start
start <- Sys.time()
colSums(t(matrix(1, 100, 200)) * (matrix(1, 200, 200) %*% t(matrix(1, 100, 200))))
# multi.k.approx.stat(matrix(1, 200, 200), matrix(1, 500, 200))
Sys.time() - start
start <- Sys.time()
colSums(t(matrix(1, 100, 200)) * (matrix(1, 200, 200) %*% t(matrix(1, 100, 200))))
# multi.k.approx.stat(matrix(1, 200, 200), matrix(1, 500, 200))
Sys.time() - start
start <- Sys.time()
t(matrix(1, 100, 200)) * (matrix(1, 200, 200) %*% t(matrix(1, 100, 200)))
# multi.k.approx.stat(matrix(1, 200, 200), matrix(1, 500, 200))
Sys.time() - start
start <- Sys.time()
l <- t(matrix(1, 100, 200)) * (matrix(1, 200, 200) %*% t(matrix(1, 100, 200)))
# multi.k.approx.stat(matrix(1, 200, 200), matrix(1, 500, 200))
Sys.time() - start
start <- Sys.time()
l <- t(matrix(1, 100, 200)) * (matrix(1, 200, 200) %*% t(matrix(1, 100, 200)))
# multi.k.approx.stat(matrix(1, 200, 200), matrix(1, 500, 200))
Sys.time() - start
start <- Sys.time()
l <- t(matrix(1, 100, 200)) * (matrix(1, 200, 200) %*% t(matrix(1, 100, 200)))
# multi.k.approx.stat(matrix(1, 200, 200), matrix(1, 500, 200))
Sys.time() - start
start <- Sys.time()
l <- t(matrix(1, 1000, 200)) * (matrix(1, 200, 200) %*% t(matrix(1, 1000, 200)))
# multi.k.approx.stat(matrix(1, 200, 200), matrix(1, 500, 200))
Sys.time() - start
start <- Sys.time()
l <- t(matrix(1, 100, 200)) * (matrix(1, 200, 200) %*% t(matrix(1, 100, 200)))
# multi.k.approx.stat(matrix(1, 200, 200), matrix(1, 500, 200))
Sys.time() - start
start <- Sys.time()
for i in (1:100){
start <- Sys.time()
for (i in 1:100){
l <- t(rep(1, 200)) %*% matrix(1, 200, 200) %*% t(t(rep(1, 200)))
}
Sys.time() - start
l = rep(0, 100)
start <- Sys.time()
for (i in 1:100){
l[i] <- t(rep(1, 200)) %*% matrix(1, 200, 200) %*% t(t(rep(1, 200)))
}
Sys.time() - start
l
colSums(t(matrix(1, 100, 200)) * (matrix(1, 200, 200) %*% t(matrix(1, 100, 200))))
t(matrix(1, 100, 200)) * (matrix(1, 200, 200) %*% t(matrix(1, 100, 200)))
start <- Sys.time()
l <- colSums(t(matrix(1, 100, 200)) * (matrix(1, 200, 200) %*% t(matrix(1, 100, 200))))
# multi.k.approx.stat(matrix(1, 200, 200), matrix(1, 500, 200))
Sys.time() - start
multi.perm.test(m,
pooled.samp[perm.rows[x,1:m],],
pooled.samp[perm.rows[x,(m+1):(2*m)],],
kernel.vec)
multi.perm.test <- function(m, x.perm, y.perm, kernel.vec){
start <- Sys.time()
mmd.perm.vec <- m*compute.MMD.vec(x.perm, y.perm, kernel.vec)
print (Sys.time() - start)
start <- Sys.time()
inv.cov <- Rfast::spdinv(est.cov(m, x.perm, kernel.vec))
# inv.cov <- matrix(0, length(kernel.vec), length(kernel.vec))
print (Sys.time() - start)
start <- Sys.time()
mmd.perm.func <- multi.func(mmd.perm.vec, param = inv.cov)
print (Sys.time() - start)
return (mmd.perm.func)
}
start <- Sys.time()
sum(mcsapply(1:n.perm, function(x){multi.perm.test(m,
pooled.samp[perm.rows[x,1:m],],
pooled.samp[perm.rows[x,(m+1):(2*m)],],
kernel.vec) >= mmd.samp.func}))
Sys.time() - start
multi.perm.test(m,
pooled.samp[perm.rows[x,1:m],],
pooled.samp[perm.rows[x,(m+1):(2*m)],],
kernel.vec)
multi.H0.cutoff(n, X, kernel.vec,
inv.cov.samp,
n.iter = n.est)
setwd("~/Dropbox (Penn)/Kernel-Two-Sample/Simulations/Revision Simulations/Revision II Simulations/Oracle Split MMD/Test")
source("~/Dropbox (Penn)/Kernel-Two-Sample/Simulations/Revision Simulations/Revision II Simulations/Oracle Split MMD/Test/Body.R", echo=TRUE)
power_out
write.csv(power_out, "PowerLapLocal.csv")
source("~/Dropbox (Penn)/Kernel-Two-Sample/Simulations/Revision Simulations/Revision II Simulations/Oracle Split MMD/Test/Body.R", echo=TRUE)
power_out
source("~/Dropbox (Penn)/Kernel-Two-Sample/Simulations/Revision Simulations/Revision II Simulations/Oracle Split MMD/Test/Body.R", echo=TRUE)
power_out
source("~/Dropbox (Penn)/Kernel-Two-Sample/Simulations/Revision Simulations/Revision II Simulations/Oracle Split MMD/Test/Body.R", echo=TRUE)
power_out
GEXP<-read.csv("MultiPower-GEXP.csv")
LAPMultiple<-read.csv("MultiPower-LAP.csv")
Mixed<-read.csv("MultiPower-MIXED.csv")
FR<-read.csv("Power-FR.csv")
View(Mixed)
MMDAgg.gaussian.power <- read_csv("PowerGaussMixProb.csv") %>%
rev(.) %>%
as.matrix()
library(tidyverse)
MMDAgg.gaussian.power <- read_csv("PowerGaussMixProb.csv") %>%
rev(.) %>%
as.matrix()
GEXP<-read.csv("MultiPower-GEXP.csv")
LAPMultiple<-read.csv("MultiPower-LAP.csv")
Mixed<-read.csv("MultiPower-MIXED.csv")
FR<-read.csv("Power-FR.csv")
MMDAgg.gaussian.power <- read_csv("PowerGaussLocal.csv") %>%
as.matrix()
View(MMDAgg.gaussian.power)
source("~/Dropbox (Penn)/Kernel-Two-Sample/Simulations/Revision Simulations/Revision II Simulations/Oracle Split MMD/Test/Figure.R", echo=TRUE)
source("~/Dropbox (Penn)/Kernel-Two-Sample/Simulations/Revision Simulations/Revision II Simulations/Oracle Split MMD/Test/Figure.R", echo=TRUE)
source("~/Dropbox (Penn)/Kernel-Two-Sample/Simulations/Revision Simulations/Revision II Simulations/Oracle Split MMD/Test/Figure.R", echo=TRUE)
source("~/Dropbox (Penn)/Kernel-Two-Sample/Simulations/Revision Simulations/Revision II Simulations/Oracle Split MMD/Test/Figure.R", echo=TRUE)
setwd("~/Dropbox (Penn)/Kernel-Two-Sample/Simulations/Revision Simulations/Revision II Simulations/Oracle Split MMD/MixProb")
source("~/Dropbox (Penn)/Kernel-Two-Sample/Simulations/Revision Simulations/Revision II Simulations/Oracle Split MMD/MixProb/Figure.R", echo=TRUE)
source("~/Dropbox (Penn)/Kernel-Two-Sample/Simulations/Revision Simulations/Revision II Simulations/Oracle Split MMD/MixProb/Figure.R", echo=TRUE)
